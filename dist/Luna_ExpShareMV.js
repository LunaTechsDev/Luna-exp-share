//=============================================================================
// Luna_ExpShareMV.js
//=============================================================================
//=============================================================================
// Build Date: 2020-08-26 21:02:19
//=============================================================================
//=============================================================================
// Made with LunaTea -- Haxe
//=============================================================================

// Generated by Haxe 4.1.3
/*:
* @author LunaTechs - Kino
* @plugindesc Allows you to designate how much exp to share with reserved
* party members <LunaExpShare>
*
* @param ReserveExp
* @text Reserve Member EXP Rate (100 / 100) = 1
* @type number
* @default 100
*
* @help
//=============================================================================
//  Introduction
//=============================================================================
* For you Pokemon fans out there, this plugin allows you to set the
* exp sharing rate of your reserve members (battle members) to whatever
* you want.
* The Rate is divided by 100, thus the base rate is 1.
//=============================================================================
//  How To Use
//=============================================================================
* You can turn it off simply by unchecking the reserve party exp
* in your database, or reducing the exp rate.
*
* version 1.0.0
*
* MIT License
* Copyright (c) 2020 LunaTechsDev
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE
*
*
* Hope this plugin helps, and enjoy!
* --Kino
*/
(function ($hx_exports, $global) { "use strict"
class EReg {
	constructor(r,opt) {
		this.r = new RegExp(r,opt.split("u").join(""))
	}
	match(s) {
		if(this.r.global) {
			this.r.lastIndex = 0
		}
		this.r.m = this.r.exec(s)
		this.r.s = s
		return this.r.m != null;
	}
}
class LunaExpShare {
	static main() {
		let _this = $plugins
		let _g = []
		let _g1 = 0
		while(_g1 < _this.length) {
			let v = _this[_g1]
			++_g1
			if(new EReg("<LunaExpShare>","ig").match(v.description)) {
				_g.push(v)
			}
		}
		let ExpShareParam = parseFloat(_g[0].parameters["ReserveExp"])
		
//=============================================================================
// Game_Actor
//=============================================================================
      
		let oldBenchExpRate = Game_Actor.prototype.benchMembersExpRate
		Game_Actor.prototype.benchMembersExpRate = function() {
			if($dataSystem.optExtraExp) {
				return ExpShareParam / 100.0;
			} else {
				return oldBenchExpRate.call(this);
			}
		}
	}
}
class haxe_iterators_ArrayIterator {
	constructor(array) {
		this.current = 0
		this.array = array
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return this.array[this.current++];
	}
}
class _$LTGlobals_$ {
}
class utils_Fn {
	static proto(obj) {
		return obj.prototype;
	}
}
LunaExpShare.main()
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, {})
